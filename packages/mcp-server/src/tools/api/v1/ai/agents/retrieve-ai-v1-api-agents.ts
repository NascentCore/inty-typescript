// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'inty-mcp/filtering';
import { Metadata, asTextContentResult } from 'inty-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Inty from 'inty';

export const metadata: Metadata = {
  resource: 'api.v1.ai.agents',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/api/v1/ai/agents/{agent_id}',
  operationId: 'get_public_agent_by_id',
};

export const tool: Tool = {
  name: 'retrieve_ai_v1_api_agents',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nGet public agent by ID, include pre-generated agents and user-created public agents\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/agent',\n  $defs: {\n    agent: {\n      type: 'object',\n      title: 'Agent',\n      description: 'AI角色',\n      properties: {\n        id: {\n          type: 'string',\n          title: 'Id'\n        },\n        created_at: {\n          type: 'integer',\n          title: 'Created At'\n        },\n        gender: {\n          type: 'string',\n          title: 'Gender'\n        },\n        name: {\n          type: 'string',\n          title: 'Name'\n        },\n        readable_id: {\n          type: 'string',\n          title: 'Readable Id'\n        },\n        status: {\n          type: 'string',\n          title: 'AgentStatus',\n          description: 'AI角色状态',\n          enum: [            'PENDING',\n            'APPROVED',\n            'REJECTED'\n          ]\n        },\n        alternate_greetings: {\n          type: 'array',\n          title: 'Alternate Greetings',\n          items: {\n            type: 'string'\n          }\n        },\n        avatar: {\n          type: 'string',\n          title: 'Avatar'\n        },\n        background: {\n          type: 'string',\n          title: 'Background'\n        },\n        background_images: {\n          type: 'array',\n          title: 'Background Images',\n          items: {\n            type: 'string'\n          }\n        },\n        category: {\n          type: 'string',\n          title: 'Category'\n        },\n        character_book: {\n          type: 'object',\n          title: 'Character Book',\n          additionalProperties: true\n        },\n        character_card_spec: {\n          type: 'string',\n          title: 'Character Card Spec'\n        },\n        character_version: {\n          type: 'string',\n          title: 'Character Version'\n        },\n        connector_count: {\n          type: 'integer',\n          title: 'Connector Count'\n        },\n        creator: {\n          $ref: '#/$defs/user'\n        },\n        creator_id: {\n          type: 'string',\n          title: 'Creator Id'\n        },\n        creator_notes: {\n          type: 'string',\n          title: 'Creator Notes',\n          description: '创作者备注'\n        },\n        extensions: {\n          type: 'object',\n          title: 'Extensions',\n          additionalProperties: true\n        },\n        follower_count: {\n          type: 'integer',\n          title: 'Follower Count'\n        },\n        intro: {\n          type: 'string',\n          title: 'Intro'\n        },\n        is_followed: {\n          type: 'boolean',\n          title: 'Is Followed'\n        },\n        llm_config: {\n          $ref: '#/$defs/model_config'\n        },\n        main_prompt: {\n          type: 'string',\n          title: 'Main Prompt',\n          description: '主提示词 - 作为第一个system message，覆盖全局默认主提示词'\n        },\n        message_example: {\n          type: 'string',\n          title: 'Message Example',\n          description: '对话示例'\n        },\n        mode_prompt: {\n          type: 'string',\n          title: 'Mode Prompt',\n          description: '模式提示词 - 放在角色卡提示词后面，覆盖全局默认模式提示词'\n        },\n        opening: {\n          type: 'string',\n          title: 'Opening'\n        },\n        personality: {\n          type: 'string',\n          title: 'Personality',\n          description: '角色性格特点 (推荐)'\n        },\n        photos: {\n          type: 'array',\n          title: 'Photos',\n          items: {\n            type: 'string'\n          }\n        },\n        post_history_instructions: {\n          type: 'string',\n          title: 'Post History Instructions'\n        },\n        prompt: {\n          type: 'string',\n          title: 'Prompt',\n          description: '已废弃 - 请使用personality字段代替'\n        },\n        scenario: {\n          type: 'string',\n          title: 'Scenario',\n          description: '背景设定 (推荐)'\n        },\n        settings: {\n          type: 'object',\n          title: 'Settings',\n          additionalProperties: true\n        },\n        tags: {\n          type: 'array',\n          title: 'Tags',\n          items: {\n            type: 'string'\n          }\n        },\n        updated_at: {\n          type: 'integer',\n          title: 'Updated At'\n        },\n        visibility: {\n          $ref: '#/$defs/agent_visibility'\n        },\n        voice_id: {\n          type: 'string',\n          title: 'Voice Id'\n        }\n      },\n      required: [        'id',\n        'created_at',\n        'gender',\n        'name',\n        'readable_id',\n        'status'\n      ]\n    },\n    user: {\n      type: 'object',\n      title: 'User',\n      description: '返回给客户端的用户信息',\n      properties: {\n        id: {\n          type: 'string',\n          title: 'Id'\n        },\n        auth_type: {\n          type: 'string',\n          title: 'Auth Type'\n        },\n        created_at: {\n          type: 'string',\n          title: 'Created At',\n          format: 'date-time'\n        },\n        is_active: {\n          type: 'boolean',\n          title: 'Is Active'\n        },\n        readable_id: {\n          type: 'string',\n          title: 'Readable Id'\n        },\n        age_group: {\n          type: 'string',\n          title: 'Age Group'\n        },\n        avatar: {\n          type: 'string',\n          title: 'Avatar'\n        },\n        connector_count: {\n          type: 'integer',\n          title: 'Connector Count'\n        },\n        description: {\n          type: 'string',\n          title: 'Description'\n        },\n        email: {\n          type: 'string',\n          title: 'Email'\n        },\n        followers_count: {\n          type: 'integer',\n          title: 'Followers Count'\n        },\n        gender: {\n          $ref: '#/$defs/gender'\n        },\n        is_superuser: {\n          type: 'boolean',\n          title: 'Is Superuser'\n        },\n        nickname: {\n          type: 'string',\n          title: 'Nickname'\n        },\n        phone: {\n          type: 'string',\n          title: 'Phone'\n        },\n        public_agents_count: {\n          type: 'integer',\n          title: 'Public Agents Count'\n        },\n        system_language: {\n          type: 'string',\n          title: 'System Language'\n        },\n        total_public_agents_follows: {\n          type: 'integer',\n          title: 'Total Public Agents Follows'\n        },\n        updated_at: {\n          type: 'string',\n          title: 'Updated At',\n          format: 'date-time'\n        }\n      },\n      required: [        'id',\n        'auth_type',\n        'created_at',\n        'is_active',\n        'readable_id'\n      ]\n    },\n    gender: {\n      type: 'string',\n      title: 'Gender',\n      description: '性别',\n      enum: [        'MALE',\n        'FEMALE',\n        'OTHER'\n      ]\n    },\n    model_config: {\n      type: 'object',\n      title: 'ModelConfig',\n      description: 'AI模型配置',\n      properties: {\n        api_key: {\n          type: 'string',\n          title: 'Api Key'\n        },\n        base_url: {\n          type: 'string',\n          title: 'Base Url'\n        },\n        frequency_penalty: {\n          type: 'number',\n          title: 'Frequency Penalty',\n          description: 'Frequency penalty'\n        },\n        max_tokens: {\n          type: 'integer',\n          title: 'Max Tokens',\n          description: 'Maximum tokens in response'\n        },\n        model: {\n          type: 'string',\n          title: 'Model'\n        },\n        presence_penalty: {\n          type: 'number',\n          title: 'Presence Penalty',\n          description: 'Presence penalty'\n        },\n        temperature: {\n          type: 'number',\n          title: 'Temperature',\n          description: 'Temperature for response generation'\n        },\n        top_k: {\n          type: 'integer',\n          title: 'Top K',\n          description: 'Top-k sampling parameter'\n        },\n        top_p: {\n          type: 'number',\n          title: 'Top P',\n          description: 'Top-p sampling parameter'\n        }\n      }\n    },\n    agent_visibility: {\n      type: 'string',\n      title: 'AgentVisibility',\n      description: 'AI 角色可见性',\n      enum: [        'PUBLIC',\n        'PRIVATE'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      agent_id: {
        type: 'string',
        title: 'Agent Id',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['agent_id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Inty, args: Record<string, unknown> | undefined) => {
  const { agent_id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.api.v1.ai.agents.retrieve(agent_id)));
};

export default { metadata, tool, handler };
